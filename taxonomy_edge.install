<?php
/**
 * @file
 * Installation file for Taxonomy Edge
 */

/**
 * Implements hook_install().
 */
function taxonomy_edge_install() {
  $t = get_t();
  _taxonomy_edge_add_new_indexes(TRUE);
  backdrop_set_message($t('Taxonomy Edge is now installed. Add the provided patch to the core module Taxonomy module for better performance.'));
  backdrop_set_message($t('Taxonomy Edge settings are available under !link',
    array('!link' => l($t('Administer > Structure > Taxonomy'), 'admin/structure/taxonomy/edge'))
  ));
  backdrop_set_message($t('Remember to build trees: !link',
    array('!link' => l($t('Administer > Structure > Taxonomy'), 'admin/structure/taxonomy'))
  ));
  // Dynamically generated variable data was detected on the following lines.
}

/**
 * Implements hook_uninstall().
 */
function taxonomy_edge_uninstall() {
  // Drop the taxonomy_term_edge table.
  if (db_table_exists('taxonomy_term_edge')) {
    db_drop_table('taxonomy_term_edge');
  }

  // Drop the taxonomy_term_edge_order table.
  if (db_table_exists('taxonomy_term_edge_order')) {
    db_drop_table('taxonomy_term_edge_order');
  }

  // Clear configuration settings.
  $config_names = [
    'taxonomy_edge_max_depth',
    'taxonomy_edge_build_realtime',
    'taxonomy_edge_static_caching',
    'taxonomy_edge_optimized_get_tree',
    'taxonomy_edge_override_term_pages',
    'taxonomy_edge_exclude_root',
  ];
  $config = config('taxonomy_edge.settings');
  foreach ($config_names as $config_name) {
    $config->clear($config_name);
  }
  $config->save();

  backdrop_set_message(st('Taxonomy Edge is now uninstalled. You may remove the provided patch to the core module Taxonomy module if applicable.'));
}

/**
 * Implements hook_schema().
 */
function taxonomy_edge_schema() {
  $schema['taxonomy_term_edge'] = array(
    'description' => 'Stores edge list for taxonomies.',
    'fields' => array(
      'eid' => array(
        'description' => 'Edge ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vocabulary' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The vocabulary machine name to which this term is assigned.',
      ),
      'tid' => array(
        'description' => 'Term ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent' => array(
        'description' => 'Parent Term ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'distance' => array(
        'description' => 'Distance to parent (depth)',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'idx_update' => array('vocabulary', 'distance', 'parent'),
      'idx_depth' => array('parent', 'distance', 'vocabulary'),
      'idx_term' => array('tid', 'distance'),
      'idx_tree' => array('parent', 'vocabulary', 'distance'),
    ),
  );

  $schema['taxonomy_term_edge_order'] = array(
    'description' => 'Sequencing table for sorting taxonomies.',
    'fields' => array(
      'oid' => array(
        'description' => 'Order ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'vocabulary' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The vocabulary machine name to which this term is assigned.',
      ),
      'parent' => array(
        'description' => 'Parent term ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'eid' => array(
        'description' => 'Edge ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('oid'),
    'indexes' => array(
      'idx_order' => array('vocabulary', 'parent'),
      'idx_edge' => array('eid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_schema_alter().
 *
 * Add extra index to {node} and {taxonomy_index} tables.
 */
function taxonomy_edge_schema_alter(&$schema) {
  $schema['node']['indexes']['idx_taxonomy_edge'] = array('sticky', 'created', 'nid');
  $schema['taxonomy_index']['indexes']['nid'] = array('nid', 'tid');
  $schema['taxonomy_index']['indexes']['idx_taxonomy_edge'] = array('tid', 'nid');
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function taxonomy_edge_update_7101(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function taxonomy_edge_update_7102() { }

/**
 * Add extra indexes to tables.
 */
function _taxonomy_edge_add_new_indexes($force = FALSE) {
  $schema = array();
  taxonomy_edge_schema_alter($schema);
  foreach ($schema as $table => $table_def) {
    foreach ($table_def['indexes'] as $index_name => $fields) {
      if (!db_index_exists($table, $index_name)) {
        db_add_index($table, $index_name, $fields);
      }
      elseif ($force === TRUE || (is_array($force) && in_array("$table:$index_name", $force))) {
        db_drop_index($table, $index_name);
        db_add_index($table, $index_name, $fields);
      }
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function taxonomy_edge_update_last_removed() {
  return 7102;
}

/**
 * Migrate taxonomy_edge variables to config.
 */
function taxonomy_edge_update_1000() {
  $config = config('taxonomy_edge.settings');
  $config->set('taxonomy_edge_max_depth', update_variable_get('taxonomy_edge_max_depth', 'TAXONOMY_EDGE_MAX_DEPTH'));
  $config->set('taxonomy_edge_build_realtime', update_variable_get('taxonomy_edge_build_realtime', 'TAXONOMY_EDGE_BUILD_REALTIME'));
  $config->set('taxonomy_edge_static_caching', update_variable_get('taxonomy_edge_static_caching', 'TAXONOMY_EDGE_STATIC_CACHING'));
  $config->set('taxonomy_edge_optimized_get_tree', update_variable_get('taxonomy_edge_optimized_get_tree', 'TAXONOMY_EDGE_OPTIMIZED_GET_TREE'));
  $config->set('taxonomy_edge_override_term_pages', update_variable_get('taxonomy_edge_override_term_pages', ''));
  $config->set('taxonomy_edge_exclude_root', update_variable_get('taxonomy_edge_exclude_root', TRUE));
  $config->save();

  update_variable_del('taxonomy_edge_max_depth');
  update_variable_del('taxonomy_edge_build_realtime');
  update_variable_del('taxonomy_edge_static_caching');
  update_variable_del('taxonomy_edge_optimized_get_tree');
  update_variable_del('taxonomy_edge_override_term_pages');
  update_variable_del('taxonomy_edge_exclude_root');
}
